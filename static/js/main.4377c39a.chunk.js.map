{"version":3,"sources":["RangeSliders/RangeSlider.style.js","RangeSliders/RangeSlider.js","App.js","serviceWorker.js","index.js"],"names":["PriceSlider","styled","div","InputSlider","input","Container","Fullrange","Movingrange","RangeSlider","props","handleChange1","event","setState","value1","target","value","document","getElementById","style","background","state","value2","handleChange2","oninput","setPercentage","this","fullRange","getElementsByClassName","width","offsetWidth","onChange","id","min","max","step","type","className","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRAGaA,EAAcC,IAAOC,IAAG,sIASxBC,EAAcF,IAAOG,MAAK,s8CA4D1BC,EAAYJ,IAAOC,IAAG,+MAUpBI,EAAYL,IAAOC,IAAG,6FAMtBK,EAAcN,IAAOC,IAAG,gMC7BxBM,EAlDE,kDACb,WAAYC,GAAO,IAAD,EAKb,OALa,qBACd,cAAMA,IAiBVC,cAAe,SAACC,GACZ,EAAKC,SAAS,CAACC,OAAQF,EAAMG,OAAOC,QACzBC,SAASC,eAAe,YAChCC,MAAMC,WAAU,4CAAwC,EAAKC,MAAMP,OAAM,sBAAc,EAAKO,MAAMP,OAAM,qBAAa,EAAKO,MAAMC,OAAM,qBAAa,EAAKD,MAAMC,OAAM,OAC1K,EACDC,cAAe,SAACX,GACZ,EAAKC,SAAS,CAACS,OAAQV,EAAMG,OAAOC,QACzBC,SAASC,eAAe,YAChCC,MAAMC,WAAU,4CAAwC,EAAKC,MAAMP,OAAM,sBAAc,EAAKO,MAAMP,OAAM,qBAAa,EAAKO,MAAMC,OAAM,qBAAa,EAAKD,MAAMC,OAAM,OAxBvK,EAAKD,MAAQ,CACTP,OAAQ,EACRQ,OAAQ,KACX,EA0CJ,OAzCA,8CAED,WACiBL,SAASC,eAAe,WAC9BM,QAAU,WACb,IAAIC,EAAgBC,KAAKV,MAAQ,IAC7BW,EAAYV,SAASW,uBAAuB,aAC9BX,SAASW,uBAAuB,eACtC,GAAGT,MAAMU,MAAK,UAAMF,EAAU,GAAGG,YAAcL,EAAa,SAE/E,oBAYD,WACI,OACI,6BACA,kBAACxB,EAAW,KACR,kBAACG,EAAW,CAACY,MAAOU,KAAKL,MAAMP,OAAQiB,SAAUL,KAAKf,cAAeqB,GAAG,WAAWC,IAAI,IAAIC,IAAI,MAAMC,KAAK,IAAIC,KAAK,UACnH,kBAAChC,EAAW,CAACY,MAAOU,KAAKL,MAAMC,OAAQS,SAAUL,KAAKH,cAAeS,GAAG,WAAWC,IAAI,IAAIC,IAAI,MAAMC,KAAK,IAAIC,KAAK,WAEvH,6BACA,kBAAC9B,EAAS,KACN,kBAACC,EAAS,CAAC8B,UAAU,aACjB,kBAAC7B,EAAW,CAAC6B,UAAU,kBAI/B,6BACA,2BAAOD,KAAK,QAAQH,IAAI,IAAIC,IAAI,MAAOG,UAAU,SAASL,GAAG,kBAIpE,EAhDY,CAASM,IAAMC,WCIjBC,G,MATH,SAAH,GAAc,qCACnB,OACI,6BACI,kBAAC,EAAY,SCKLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAG,MAAK9B,SAASC,eAAe,SD2H3C,kBAAmB8B,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4377c39a.chunk.js","sourcesContent":["import styled from 'styled-components'\n\n\nexport const PriceSlider = styled.div`\n    width: 300px;\n    margin: auto;\n    text-align: center;\n    position: relative;\n    height: 6em;\n`;\n\n \nexport const InputSlider = styled.input`\n    position: absolute;\n    left: 0;\n    bottom: 0;\n    -webkit-appearance: none;\n    width: 100%;\n    border: solid 1px #f5f5f5;\n    border-radius: 8px;\n    background : linear-gradient(to right, #C3C3C3 0%, #0070cd 0%,#0070cd 100%,#C3C3C3 100%);\n    :focus {\n        outline: none;\n    }\n    ::-webkit-slider-runnable-track {\n        width: 100%;\n        height: 2px;\n        cursor: pointer; \n        border-radius: 1px;\n        box-shadow: none;\n        border: 0;\n    }\n    ::-webkit-slider-thumb {\n        z-index: 2;\n        position: relative;\n        box-shadow: 0px 0px 0px #000;\n        border: 1px solid #1da1f2;\n        height: 18px;\n        width: 18px;\n        border-radius: 25px;\n        background: #a1d0ff;\n        cursor: pointer;\n        -webkit-appearance: none;\n        margin-top: -7px;\n    }\n    ::-moz-range-track {\n        width: 100%;\n        height: 2px;\n        cursor: pointer; \n        border-radius: 1px;\n        box-shadow: none;\n        border: 0;\n    }\n    ::-moz-range-thumb {\n        z-index: 2;\n        position: relative;\n        box-shadow: 0px 0px 0px #000;\n        border: 1px solid #1da1f2;\n        height: 18px;\n        width: 18px;\n        border-radius: 25px;\n        cursor: pointer;\n    }\n    ::-ms-track {\n        width: 100%;\n        height: 2px;\n        cursor: pointer; \n        border-color: transparent;\n        color: transparent;\n    }\n`;\n\nexport const Container = styled.div`\n    display : inline-block;\n    background-color : white;\n    border : 0.5px;\n    border-style : solid;\n    border-color : #616161;\n    width : 200px;\n    height : 20px;\n  `;\n  \n  export const Fullrange = styled.div` \n    padding : 0.5px;\n    width : 100%;\n    margin : 0.5px;\n  `;\n  \n  export const Movingrange = styled.div`\n    display : block;\n    width : 100px;\n    height : 17px;\n    background-color : red;\n    background-image: linear-gradient(to right, lightgreen , green );\n  `;","import React from 'react'\nimport {\n    PriceSlider,\n    InputSlider,\n    Container,\n    Fullrange,\n    Movingrange,\n} from './RangeSlider.style'\n\nclass RangeSlider extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = { \n            value1: 0,\n            value2: 100\n        }\n    }\n\n    componentDidMount(){\n        var slider = document.getElementById(\"myRange\");  \n        slider.oninput = function() {\n            let setPercentage = this.value / 100;\n            let fullRange = document.getElementsByClassName('fullrange')\n            let movingrange = document.getElementsByClassName('movingrange')\n            movingrange[0].style.width = `${fullRange[0].offsetWidth * setPercentage}px` \n        }\n    }\n\n    handleChange1= (event)=> {\n        this.setState({value1: event.target.value});\n        const el = document.getElementById(\"myinput2\")\n        el.style.background = `linear-gradient(to right, #C3C3C3 ${this.state.value1}%, #0070cd ${this.state.value1}%,#0070cd ${this.state.value2}%,#C3C3C3 ${this.state.value2}%)`\n    }\n    handleChange2= (event)=> {\n        this.setState({value2: event.target.value});\n        const el = document.getElementById(\"myinput2\")\n        el.style.background = `linear-gradient(to right, #C3C3C3 ${this.state.value1}%, #0070cd ${this.state.value1}%,#0070cd ${this.state.value2}%,#C3C3C3 ${this.state.value2}%)`\n    }\n    render(){\n        return(\n            <div>\n            <PriceSlider>\n                <InputSlider value={this.state.value1} onChange={this.handleChange1} id=\"myinput1\" min=\"0\" max=\"100\" step=\"1\" type=\"range\"/>\n                <InputSlider value={this.state.value2} onChange={this.handleChange2} id=\"myinput2\" min=\"0\" max=\"100\" step=\"1\" type=\"range\"/>\n            </PriceSlider>\n            <div >\n            <Container>\n                <Fullrange className='fullrange'>\n                    <Movingrange className='movingrange'>\n                    </Movingrange>  \n                </Fullrange>\n            </Container>\n            <br/>\n            <input type='range' min=\"1\" max=\"100\"  className=\"slider\" id=\"myRange\"></input>\n        </div>\n        </div>\n        )\n    }\n}\nexport default RangeSlider","import React from 'react';\nimport RangeSliders from './RangeSliders';\nimport './App.css'\n\nconst App = ({ ...props }) => {\n    return (\n        <div>\n            <RangeSliders />\n         </div>\n                \n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}